{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nlet userSelectedDate;\nlet startBtn = document.querySelector(\"button[data-start]\");\nstartBtn.disabled = true;\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n     userSelectedDate=selectedDates[0];\n     if(selectedDates[0] < new Date()) {\n        iziToast.error({\n            title: 'Hata',\n            message: \"Please choose a date in the future\",\n            position: 'topCenter',\n          });\n        return;\n      }\n      else {\n        document.querySelector(\"button[data-start]\").disabled = false;\n        userSelectedDate = selectedDates[0];\n        console.log(userSelectedDate);\n      }\n    },\n  };\n\n  const flatpickrInstance = flatpickr(\"#datetime-picker\", options);\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\nstartBtn.addEventListener(\"click\", () => {\n    startBtn.disabled = true;\n    let timerId = setInterval(() => {\n        const currentTime = new Date();\n        const deltaTime = userSelectedDate - currentTime;\n        if (deltaTime < 0) {\n            clearInterval(timerId);\n            return;\n        }\n        const { days, hours, minutes, seconds } = convertMs(deltaTime);\n        document.querySelector(\"span[data-days]\").textContent = addLeadingZero(days);\n        document.querySelector(\"span[data-hours]\").textContent = addLeadingZero(hours);\n        document.querySelector(\"span[data-minutes]\").textContent = addLeadingZero(minutes);\n        document.querySelector(\"span[data-seconds]\").textContent = addLeadingZero(seconds);\n        startBtn.disabled = false;\n    }, 1000);\n}\n);"],"names":["userSelectedDate","startBtn","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","timerId","deltaTime"],"mappings":"2GAIA,IAAIA,EACAC,EAAW,SAAS,cAAc,oBAAoB,EAC1DA,EAAS,SAAW,GACpB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAEtB,GADAH,EAAiBG,EAAc,CAAC,EAC7BA,EAAc,CAAC,EAAI,IAAI,KAAQ,CAC/BC,EAAS,MAAM,CACX,MAAO,OACP,QAAS,qCACT,SAAU,WACtB,CAAW,EACH,MACD,MAEC,SAAS,cAAc,oBAAoB,EAAE,SAAW,GACxDJ,EAAmBG,EAAc,CAAC,EAClC,QAAQ,IAAIH,CAAgB,CAE/B,CACL,EAE4BK,EAAU,mBAAoBH,CAAO,EAEjE,SAASI,EAAUC,EAAI,CAQnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAEH,SAASC,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,CACHZ,EAAS,iBAAiB,QAAS,IAAM,CACrCA,EAAS,SAAW,GACpB,IAAIa,EAAU,YAAY,IAAM,CAE5B,MAAMC,EAAYf,EADE,IAAI,KAExB,GAAIe,EAAY,EAAG,CACf,cAAcD,CAAO,EACrB,MACH,CACD,KAAM,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUS,CAAS,EAC7D,SAAS,cAAc,iBAAiB,EAAE,YAAcH,EAAeJ,CAAI,EAC3E,SAAS,cAAc,kBAAkB,EAAE,YAAcI,EAAeH,CAAK,EAC7E,SAAS,cAAc,oBAAoB,EAAE,YAAcG,EAAeF,CAAO,EACjF,SAAS,cAAc,oBAAoB,EAAE,YAAcE,EAAeD,CAAO,EACjFV,EAAS,SAAW,EACvB,EAAE,GAAI,CACX,CACA"}